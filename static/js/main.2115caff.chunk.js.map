{"version":3,"sources":["components/Game/useGameReducer.js","sfx/mp3/clear1.mp3","sfx/mp3/clear2.mp3","sfx/mp3/clear3.mp3","sfx/mp3/clear4.mp3","sfx/mp3/gameOver.mp3","sfx/mp3/hardDrop.mp3","sfx/mp3/locked.mp3","sfx/mp3/spawn.mp3","engine/checks.js","engine/actions.js","engine/clearLines.js","components/Game/reducer.js","components/Game/Game.js","engine/tetrominoes.js","components/Game/index.js","sfx/audio.js","engine/randomizer.js","App.js","reportWebVitals.js","index.js"],"names":["audio","randomizer","landed","tetromino","playfield","height","length","shape","some","row","y","occupied","x","top","left","returnOriginalIfInvalid","updatedTetromino","originalTetromino","width","isPositionValid","rotateRight","map","_","directions","directionOffset","move","direction","merge","hardDrop","result","emptyLines","Array","phases","spawning","descending","locking","clearing","gameOver","starting","pending","undefined","doLock","state","lockResult","locked","lock","ghostPiece","sfx","phase","visitors","tick","action","payload","clear","clearResult","clearedPlayfield","reduceRight","acc","every","concat","linesCleared","clearLines","lines","interval","Math","max","floor","rotateLeft","spawn","queue","newTetromino","newQueue","slice","isAlive","alive","start","countdown","validPhases","reducer","type","includes","initialState","Game","customHook","getTetrominoBlock","className","data-testid","block","onClick","i","keyMappings","ArrowLeft","ArrowRight","ArrowDown","o","O","name","I","s","S","z","Z","t","T","j","J","l","L","AudioContext","context","play","file","promiseOfAudio","fetch","then","data","arrayBuffer","decodeAudioData","decode","audioBuffer","source","createBufferSource","buffer","connect","destination","clear1","clear1Mp3","clear2","clear2Mp3","clear3","clear3Mp3","clear4","clear4Mp3","lockedMp3","spawnMp3","hardDropMp3","gameOverMp3","Audio","GameFactory","xs","randomIndex","random","temp","shuffle","useReducer","dispatch","hasTetromino","useEffect","handle","setInterval","clearInterval","phaseVisitors","setTimeout","onKeydown","e","key","document","body","addEventListener","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2115caff.chunk.js","sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks */\r\n\r\nimport { directions, hardDrop } from '../../engine/actions';\r\nimport { initialState, phases, reducer } from './reducer';\r\nimport { useEffect, useReducer } from 'react';\r\n\r\nconst keyMappings = {\r\n  ArrowLeft: directions.left,\r\n  ArrowRight: directions.right,\r\n  ArrowDown: directions.down\r\n};\r\nexport const UseGameReducer = (audio, randomizer) => () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const hasTetromino = state.tetromino !== undefined;\r\n  useEffect(() => {\r\n    const handle =\r\n      state.alive && hasTetromino\r\n        ? setInterval(() => dispatch({ type: 'tick' }), state.interval)\r\n        : 0;\r\n    return () => clearInterval(handle);\r\n  }, [state.alive, hasTetromino, state.interval]);\r\n  useEffect(() => {\r\n    if (state.sfx) {\r\n      audio[state.sfx]();\r\n    }\r\n  }, [state.sfx]);\r\n  useEffect(() => {\r\n    const phaseVisitors = {\r\n      [phases.spawning]: () =>\r\n        setTimeout(\r\n          () =>\r\n            dispatch({\r\n              type: 'spawn',\r\n              payload: state.queue.length <= 3 ? randomizer() : []\r\n            }),\r\n          500\r\n        ),\r\n      [phases.locking]: () =>\r\n        setTimeout(\r\n          () =>\r\n            dispatch({\r\n              type: 'lock'\r\n            }),\r\n          500\r\n        ),\r\n      [phases.clearing]: () =>\r\n        setTimeout(\r\n          () =>\r\n            dispatch({\r\n              type: 'clear'\r\n            }),\r\n          500\r\n        ),\r\n      [phases.starting]: () => {\r\n        if (state.countdown > 0) {\r\n          setTimeout(\r\n            () =>\r\n              dispatch({\r\n                type: 'countdown'\r\n              }),\r\n            1000\r\n          );\r\n        } else {\r\n          dispatch({\r\n            type: 'spawn',\r\n            payload: randomizer()\r\n          });\r\n        }\r\n      }\r\n    };\r\n    phaseVisitors[state.phase]?.();\r\n  }, [state.phase, state.queue.length, state.countdown]);\r\n  useEffect(() => {\r\n    const onKeydown = (e) => {\r\n      if (keyMappings[e.key]) {\r\n        dispatch({ type: 'move', payload: keyMappings[e.key] });\r\n      }\r\n      if (e.key === 'ArrowUp') {\r\n        dispatch({ type: 'rotateRight' });\r\n      }\r\n      if (e.key === ' ') {\r\n        dispatch({ type: 'hardDrop' });\r\n      }\r\n    };\r\n    if (state.alive) {\r\n      document.body.addEventListener('keydown', onKeydown);\r\n    }\r\n    return () => document.body.removeEventListener('keydown', onKeydown);\r\n  }, [state.alive]);\r\n\r\n  const start = () => dispatch({ type: 'start', payload: randomizer() });\r\n  return {\r\n    state,\r\n    start\r\n  };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/clear1.fe1236db.mp3\";","export default __webpack_public_path__ + \"static/media/clear2.42d27630.mp3\";","export default __webpack_public_path__ + \"static/media/clear3.50cd846e.mp3\";","export default __webpack_public_path__ + \"static/media/clear4.529df8a4.mp3\";","export default __webpack_public_path__ + \"static/media/gameOver.f52cf5f0.mp3\";","export default __webpack_public_path__ + \"static/media/hardDrop.d2d4cb32.mp3\";","export default __webpack_public_path__ + \"static/media/locked.f92eb651.mp3\";","export default __webpack_public_path__ + \"static/media/spawn.dcb5ecc2.mp3\";","export const landed = (tetromino, playfield) => {\n  const height = playfield.length;\n  return tetromino.shape.some((row, y) =>\n    row.some(\n      (occupied, x) =>\n        occupied &&\n        (y + tetromino.top >= height - 1 ||\n          playfield[y + tetromino.top + 1][x + tetromino.left])\n    )\n  );\n};\n\n\nexport const alive = (tetromino, playfield) =>\n  !tetromino.shape.some((row, y) =>\n    row.some(\n      (occupied, x) =>\n        occupied && playfield[y + tetromino.top][x + tetromino.left]\n    )\n  );\n","import { landed } from './checks';\nconst isPositionValid = (tetromino, playfield) => {\n  const width = playfield[0].length;\n  const height = playfield.length;\n  return !tetromino.shape.some((row, y) =>\n    row.some(\n      (occupied, x) =>\n        occupied &&\n        (x + tetromino.left < 0 ||\n          x + tetromino.left >= width ||\n          y + tetromino.top >= height ||\n          playfield[y + tetromino.top][x + tetromino.left])\n    )\n  );\n};\n\nconst returnOriginalIfInvalid = (\n  updatedTetromino,\n  originalTetromino,\n  playfield\n) =>\n  isPositionValid(updatedTetromino, playfield)\n    ? updatedTetromino\n    : originalTetromino;\n\nexport const rotateLeft = (tetromino, playfield) =>\n  returnOriginalIfInvalid(\n    {\n      ...tetromino,\n      shape: tetromino.shape.map((row, y) =>\n        row.map((_, x) => tetromino.shape[x][tetromino.shape.length - 1 - y])\n      )\n    },\n    tetromino,\n    playfield\n  );\nexport const rotateRight = (tetromino, playfield) =>\n  returnOriginalIfInvalid(\n    {\n      ...tetromino,\n      shape: tetromino.shape.map((row, y) =>\n        row.map((_, x) => tetromino.shape[tetromino.shape.length - 1 - x][y])\n      )\n    },\n    tetromino,\n    playfield\n  );\n\nexport const directions = {\n  left: 37,\n  right: 39,\n  down: 40\n};\n\nconst directionOffset = {\n  [directions.left]: {\n    left: -1,\n    top: 0\n  },\n  [directions.right]: {\n    left: 1,\n    top: 0\n  },\n  [directions.down]: {\n    left: 0,\n    top: 1\n  }\n};\n\nexport const move = (tetromino, playfield, direction) =>\n  returnOriginalIfInvalid(\n    {\n      ...tetromino,\n      left: tetromino.left + directionOffset[direction].left,\n      top: tetromino.top + directionOffset[direction].top\n    },\n    tetromino,\n    playfield\n  );\nconst merge = (tetromino, playfield) =>\n  playfield.map((row, y) =>\n    row.map(\n      (occupied, x) =>\n        occupied || tetromino.shape[y - tetromino.top]?.[x - tetromino.left]\n    )\n  );\n\nexport const lock = (tetromino, playfield) => {\n  const locked = landed(tetromino, playfield);\n  return {\n    playfield: locked ? merge(tetromino, playfield) : playfield,\n    locked\n  };\n};\n\nexport const hardDrop = (tetromino, playfield, top = tetromino.top) => {\n  const result = { ...tetromino, top };\n  return landed(result, playfield)\n    ? result\n    : hardDrop(tetromino, playfield, top + 1);\n};\n","const emptyLines = (width, height) =>\n  [...Array(height)].map(() => [...Array(width)].map(() => undefined));\n\nexport const clearLines = (playfield) => {\n  const width = playfield[0].length;\n  const clearedPlayfield = playfield.reduceRight(\n    (acc, row) => (row.every((occupied) => occupied) ? acc : [row].concat(acc)),\n    []\n  );\n  const linesCleared = playfield.length - clearedPlayfield.length;\n  return {\n    playfield: emptyLines(width, linesCleared).concat(clearedPlayfield),\n    linesCleared\n  };\n};\n","import { alive, landed } from '../../engine/checks';\r\nimport {\r\n  directions,\r\n  hardDrop,\r\n  lock,\r\n  move,\r\n  rotateLeft,\r\n  rotateRight\r\n} from '../../engine/actions';\r\n\r\nimport { clearLines } from '../../engine/clearLines';\r\n\r\nexport const phases = {\r\n  spawning: 'spawning',\r\n  descending: 'descending',\r\n  locking: 'locking',\r\n  clearing: 'clearing',\r\n  gameOver: 'gameOver',\r\n  starting: 'starting',\r\n  pending: undefined\r\n};\r\n\r\nconst doLock = (state) => {\r\n  const { tetromino, playfield } = state;\r\n  const lockResult = lock(tetromino, playfield);\r\n  return lockResult.locked\r\n    ? {\r\n        ...state,\r\n        tetromino: undefined,\r\n        ghostPiece: undefined,\r\n        playfield: lockResult.playfield,\r\n        sfx: 'locked',\r\n        phase: phases.clearing\r\n      }\r\n    : {\r\n        ...state,\r\n        phase: phases.descending\r\n      };\r\n};\r\n\r\nconst visitors = {\r\n  tick: (state) => {\r\n    const { tetromino, playfield } = state;\r\n    const updatedTetromino = move(tetromino, playfield, directions.down);\r\n    return {\r\n      ...state,\r\n      tetromino: updatedTetromino,\r\n      phase: landed(updatedTetromino, playfield)\r\n        ? phases.locking\r\n        : phases.descending\r\n    };\r\n  },\r\n  move: (state, action) => {\r\n    const { tetromino, playfield } = state;\r\n    const updatedTetromino = move(tetromino, playfield, action.payload);\r\n    return state.phase === phases.locking && action.payload === directions.down\r\n      ? doLock(state)\r\n      : {\r\n          ...state,\r\n          tetromino: updatedTetromino,\r\n          ghostPiece: hardDrop(updatedTetromino, playfield),\r\n          phase: landed(updatedTetromino, playfield)\r\n            ? phases.locking\r\n            : phases.descending\r\n        };\r\n  },\r\n  lock: doLock,\r\n  clear: (state) => {\r\n    const { playfield } = state;\r\n    const clearResult = clearLines(playfield);\r\n    const lines = state.lines + clearResult.linesCleared;\r\n    return {\r\n      ...state,\r\n      playfield: clearResult.playfield,\r\n      lines,\r\n      sfx:\r\n        clearResult.linesCleared > 0\r\n          ? 'clear' + clearResult.linesCleared\r\n          : undefined,\r\n      interval: Math.max(100, 1000 - Math.floor(lines / 10) * 100),\r\n      phase: phases.spawning\r\n    };\r\n  },\r\n  rotateRight: (state) => {\r\n    const { tetromino, playfield } = state;\r\n    const updatedTetromino = rotateRight(tetromino, playfield);\r\n    return {\r\n      ...state,\r\n      tetromino: rotateRight(tetromino, playfield),\r\n      ghostPiece: hardDrop(updatedTetromino, playfield)\r\n    };\r\n  },\r\n  rotateLeft: (state) => {\r\n    const { tetromino, playfield } = state;\r\n    const updatedTetromino = rotateLeft(tetromino, playfield);\r\n    return {\r\n      ...state,\r\n      tetromino: updatedTetromino,\r\n      ghostPiece: hardDrop(updatedTetromino, playfield)\r\n    };\r\n  },\r\n  spawn: (state, action) => {\r\n    const { queue, playfield } = state;\r\n    const newTetromino = queue[0];\r\n    const newQueue = queue.slice(1).concat(action.payload || []);\r\n    const isAlive = alive(newTetromino, playfield);\r\n    return {\r\n      ...state,\r\n      tetromino: newTetromino,\r\n      ghostPiece: hardDrop(newTetromino, playfield),\r\n      phase: isAlive ? phases.descending : phases.gameOver,\r\n      sfx: isAlive ? 'spawn' : 'gameOver',\r\n      queue: newQueue,\r\n      alive: isAlive\r\n    };\r\n  },\r\n  hardDrop: (state) => {\r\n    const { tetromino, playfield } = state;\r\n    const updatedTetromino = hardDrop(tetromino, playfield);\r\n    return {\r\n      ...state,\r\n      tetromino: updatedTetromino,\r\n      sfx: 'hardDrop',\r\n      phase: phases.locking\r\n    };\r\n  },\r\n  start: (state, action) => ({\r\n    playfield: [...Array(20)].map(() => [...Array(10)].map(() => undefined)),\r\n    queue: action.payload,\r\n    phase: phases.starting,\r\n    tetromino: undefined,\r\n    alive: true,\r\n    interval: 1000,\r\n    lines: 0,\r\n    countdown: 3\r\n  }),\r\n  countdown: (state) => ({\r\n    ...state,\r\n    countdown: Math.max(0, state.countdown - 1)\r\n  })\r\n};\r\nconst validPhases = {\r\n  tick: [phases.descending],\r\n  move: [phases.descending, phases.locking],\r\n  lock: [phases.locking],\r\n  clear: [phases.clearing],\r\n  rotateLeft: [phases.descending, phases.locking],\r\n  rotateRight: [phases.descending, phases.locking],\r\n  spawn: [phases.spawning, phases.starting],\r\n  hardDrop: [phases.descending],\r\n  start: [phases.pending, phases.gameOver],\r\n  countdown: [phases.starting]\r\n};\r\nexport const reducer = (state, action) =>\r\n  validPhases[action.type]?.includes(state.phase)\r\n    ? visitors[action.type](state, action)\r\n    : state;\r\n\r\nexport const initialState = {\r\n  playfield: [...Array(20)].map(() => [...Array(10)].map(() => undefined)),\r\n  queue: [],\r\n  phase: phases.pending,\r\n  tetromino: undefined,\r\n  alive: false,\r\n  interval: 1000,\r\n  lines: 0,\r\n  countdown: 0\r\n};\r\n","import React from 'react';\r\nimport { phases } from './reducer';\r\n\r\nconst Game = (customHook) => () => {\r\n  const { state, start } = customHook();\r\n  const getTetrominoBlock = (tetromino, x, y) =>\r\n    tetromino && tetromino.shape[y - tetromino.top]?.[x - tetromino.left];\r\n  return (\r\n    <>\r\n      <main className=\"frame\">\r\n        <div data-testid=\"playfield\" className=\"playfield\">\r\n          {state.playfield.map((row, y) => (\r\n            <div\r\n              key={y}\r\n              className={\r\n                'row' +\r\n                (state.phase === 'clearing' && row.every((x) => x)\r\n                  ? ' clearing'\r\n                  : '')\r\n              }\r\n            >\r\n              {row.map((block, x) => (\r\n                <div\r\n                  key={x}\r\n                  className={\r\n                    getTetrominoBlock(state.tetromino, x, y) ||\r\n                    (getTetrominoBlock(state.ghostPiece, x, y)\r\n                      ? 'ghost-piece'\r\n                      : '') ||\r\n                    block ||\r\n                    ''\r\n                  }\r\n                />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        {state.phase === phases.pending || state.phase === phases.gameOver ? (\r\n          <div className=\"controls\">\r\n            <button onClick={start}>PLAY</button>\r\n          </div>\r\n        ) : null}\r\n        {state.countdown > 0 ? (\r\n          <div className=\"countdown\">{state.countdown}</div>\r\n        ) : null}\r\n      </main>\r\n      <div className=\"frame\">\r\n        <h1>NEXT</h1>\r\n        <div className=\"next-tetrominoes\">\r\n          {state.queue.slice(0, 3).map((tetromino, i) => (\r\n            <div className=\"next-tetromino\" key={i}>\r\n              {tetromino.shape.map((row, y) => (\r\n                <div key={y} className=\"row\">\r\n                  {row.map((block, x) => (\r\n                    <div className={block} key={x}></div>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <h1>LINES</h1>\r\n        <div className=\"lines\">{state.lines}</div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","//https://tetris.fandom.com/wiki/SRS\r\nconst _ = undefined;\r\nconst o = 'O';\r\nexport const O = {\r\n  top: 0,\r\n  left: 4,\r\n  name: o,\r\n  shape: [\r\n    [o, o],\r\n    [o, o]\r\n  ]\r\n};\r\nconst i = 'I';\r\nexport const I = {\r\n  top: 0,\r\n  left: 3,\r\n  name: i,\r\n  shape: [\r\n    [_, _, _, _],\r\n    [i, i, i, i],\r\n    [_, _, _, _],\r\n    [_, _, _, _]\r\n  ]\r\n};\r\nconst s = 'S';\r\nexport const S = {\r\n  top: 0,\r\n  left: 3,\r\n  name: s,\r\n  shape: [\r\n    [_, s, s],\r\n    [s, s, _],\r\n    [_, _, _]\r\n  ]\r\n};\r\nconst z = 'Z';\r\nexport const Z = {\r\n  top: 0,\r\n  left: 3,\r\n  name: z,\r\n  shape: [\r\n    [z, z, _],\r\n    [_, z, z],\r\n    [_, _, _]\r\n  ]\r\n};\r\nconst t = 'T';\r\nexport const T = {\r\n  top: 0,\r\n  left: 3,\r\n  name: t,\r\n  shape: [\r\n    [_, t, _],\r\n    [t, t, t],\r\n    [_, _, _]\r\n  ]\r\n};\r\n\r\nconst j = 'J';\r\nexport const J = {\r\n  top: 0,\r\n  left: 3,\r\n  name: j,\r\n  shape: [\r\n    [j, _, _],\r\n    [j, j, j],\r\n    [_, _, _]\r\n  ]\r\n};\r\n\r\nconst l = 'L';\r\nexport const L = {\r\n  top: 0,\r\n  left: 3,\r\n  name: l,\r\n  shape: [\r\n    [_, _, l],\r\n    [l, l, l],\r\n    [_, _, _]\r\n  ]\r\n};\r\n","import { Audio } from '../../sfx/audio';\r\nimport GameFactory from './Game';\r\nimport { UseGameReducer } from './useGameReducer';\r\nimport { randomizer } from '../../engine/randomizer';\r\n\r\nconst audio = Audio(AudioContext);\r\nconst useGameReducer = UseGameReducer(audio, randomizer);\r\nconst Game = GameFactory(useGameReducer);\r\nexport default Game;\r\n","import clear1Mp3 from './mp3/clear1.mp3';\r\nimport clear2Mp3 from './mp3/clear2.mp3';\r\nimport clear3Mp3 from './mp3/clear3.mp3';\r\nimport clear4Mp3 from './mp3/clear4.mp3';\r\nimport gameOverMp3 from './mp3/gameOver.mp3';\r\nimport hardDropMp3 from './mp3/hardDrop.mp3';\r\nimport lockedMp3 from './mp3/locked.mp3';\r\nimport spawnMp3 from './mp3/spawn.mp3';\r\n\r\nexport const Audio = (AudioContext) => {\r\n  const context = new AudioContext();\r\n  const decode = (file) =>\r\n    fetch(file)\r\n      .then((data) => data.arrayBuffer())\r\n      .then((arrayBuffer) => context.decodeAudioData(arrayBuffer));\r\n\r\n  const play = (file) => {\r\n    const promiseOfAudio = decode(file);\r\n    return () =>\r\n      promiseOfAudio.then((audioBuffer) => {\r\n        const source = context.createBufferSource();\r\n        source.buffer = audioBuffer;\r\n        source.connect(context.destination);\r\n        source.start();\r\n      });\r\n  };\r\n\r\n  return {\r\n    clear1: play(clear1Mp3),\r\n    clear2: play(clear2Mp3),\r\n    clear3: play(clear3Mp3),\r\n    clear4: play(clear4Mp3),\r\n    locked: play(lockedMp3),\r\n    spawn: play(spawnMp3),\r\n    hardDrop: play(hardDropMp3),\r\n    gameOver: play(gameOverMp3)\r\n  };\r\n};\r\n","import { I, J, L, O, S, T, Z } from './tetrominoes';\r\n\r\nconst shuffle = (xs) => {\r\n  const result = xs.slice(0);\r\n  let i = result.slice(0).length - 1;\r\n  while (i >= 0) {\r\n    const randomIndex = Math.floor(Math.random() * (i + 1));\r\n    const temp = result[i];\r\n    result[i] = result[randomIndex];\r\n    result[randomIndex] = temp;\r\n    i = i - 1;\r\n  }\r\n  return result;\r\n};\r\nexport const randomizer = () => shuffle([I, O, T, S, Z, J, L]);\r\n","import './App.scss';\n\nimport Game from './components/Game/index';\nimport React from 'react';\n\nconst App = () => <Game />;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}